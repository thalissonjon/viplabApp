import os
import subprocess
import threading
from queue import Queue

from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse, JsonResponse

# Cria a fila de vídeos a serem processados
queue = Queue()

# Define o número máximo de threads que serão usadas para processar os vídeos
max_threads = 4

# Define a função que processa um vídeo
def process_video(video_path):
    # Execute o processo para processar o vídeo
    subprocess.run(["python", "static/yolov5/source/strabismus_detection.py", "--video", video_path])

    # Atualiza a fila de vídeos a serem processados
    queue.task_done()

# Define a função que processa a fila de vídeos
def process_queue():
    while True:
        # Verifica se há vídeos na fila
        if not queue.empty():
            # Obtenha o próximo vídeo a ser processado
            video_path = queue.get()

            # Processa o vídeo em uma nova thread
            thread = threading.Thread(target=process_video, args=(video_path,))
            thread.start()
        else:
            # Aguarde um tempo antes de verificar novamente se há vídeos na fila
            time.sleep(1)

# Inicie as threads que processarão a fila de vídeos
for i in range(max_threads):
    thread = threading.Thread(target=process_queue)
    thread.start()

@csrf_exempt
def submit_link(request):
    if request.method == 'POST':
        #recupera o path atual de trabalho
        path_current = os.getcwd()

        #diretorio dos videos para serem processados
        path_input = os.path.join(path_current,'input')

        #diretorio principal de resultados
        path_output = os.path.join(path_current,'output')

        # verifica se o diretorio de entrada existe, senão existir cria
        if not os.path.isdir(os.path.join(path_current,"input")):
            os.mkdir(os.path.join(path_current,"input"))
            path_input = os.path.join(path_current,"input")
            print("Diretorio de entrada foi criado, insira os videos no diretorio de entrada.")

        # #verifica se o diretorio de saída existe, senão existr cria
        if not os.path.isdir(os.path.join(path_current,"output")):
            os.mkdir(os.path.join(path_current,"output"))
            path_output = os.path.join(path_current,"output")
            print("Diretorio de saída foi criado.")
        
        # pega o request como uma string
        # link = request.body.decode() #temporario
        request_body = request.body.decode()

        # passa como um json object
        params = json.loads(request_body)
        link = params["link"]

        # extraindo o link do firebase do json object
        params = json.loads(request.body)
        saveVideo_path = 'C:/Users/Cliente/Documents/GitHub/viplabApp/viplabprojeto/venv/scripts/input'
        file_path = os.path.join(saveVideo_path, 'video.mp4') # setar nome do video como horario local // hash pra cada requisiçao

        response = requests.get(link)